# Generated by Django 5.2 on 2025-05-08 22:33

import django.core.validators
import django.db.models.deletion
import juice_app.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bottle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(help_text='Bottle size (e.g., 350ml, 700ml)', max_length=20, validators=[juice_app.validators.validate_bottle_size])),
                ('description', models.TextField(blank=True, help_text='Additional details about the bottle')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this bottle size is in use')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Bottle Size',
                'verbose_name_plural': 'Bottle Sizes',
                'ordering': ['size'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the customer or company', max_length=100)),
                ('contact_person', models.CharField(blank=True, help_text='Primary contact person', max_length=100)),
                ('phone', models.CharField(help_text='Contact phone number', max_length=20, validators=[juice_app.validators.validate_phone_number])),
                ('email', models.EmailField(help_text='Contact email address', max_length=254, validators=[juice_app.validators.validate_email])),
                ('address', models.TextField(help_text='Physical address')),
                ('is_supplier', models.BooleanField(default=False, help_text='Whether this customer supplies raw materials')),
                ('is_buyer', models.BooleanField(default=True, help_text='Whether this customer buys finished products')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=0.0, help_text='Maximum credit extended to this customer (for buyers)', max_digits=12, validators=[juice_app.validators.validate_non_negative])),
                ('payment_terms', models.CharField(blank=True, help_text='Payment terms (e.g., Net 30, COD)', max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this customer')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this customer is active')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Product name', max_length=100)),
                ('sku', models.CharField(help_text='Stock Keeping Unit (unique identifier)', max_length=20, unique=True, validators=[juice_app.validators.validate_sku])),
                ('description', models.TextField(help_text='Product description')),
                ('ingredients_description', models.TextField(help_text='Description of ingredients for labeling')),
                ('production_cost', models.DecimalField(decimal_places=2, help_text='Cost to produce one unit (calculated from recipe)', max_digits=10, validators=[juice_app.validators.validate_non_negative])),
                ('markup_percentage', models.DecimalField(decimal_places=2, default=50.0, help_text='Markup percentage for pricing (0-200%)', max_digits=5, validators=[juice_app.validators.validate_markup_percentage])),
                ('selling_price', models.DecimalField(decimal_places=2, help_text='Selling price per unit', max_digits=10, validators=[juice_app.validators.validate_non_negative])),
                ('stock_quantity', models.DecimalField(decimal_places=2, default=0.0, help_text='Current quantity in stock', max_digits=10, validators=[juice_app.validators.validate_non_negative])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this product is active/available')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bottle', models.ForeignKey(help_text='Bottle size used for this product', on_delete=django.db.models.deletion.PROTECT, to='juice_app.bottle')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductionBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_number', models.CharField(help_text='Unique batch identifier (BATCH-YYYY-MM-DD-NNN)', max_length=20, unique=True, validators=[juice_app.validators.validate_batch_number])),
                ('planned_quantity', models.DecimalField(decimal_places=2, help_text='Planned production quantity', max_digits=10, validators=[juice_app.validators.validate_positive])),
                ('actual_quantity_produced', models.DecimalField(blank=True, decimal_places=2, help_text='Actual quantity produced (filled upon completion)', max_digits=10, null=True, validators=[juice_app.validators.validate_non_negative])),
                ('production_date', models.DateField(help_text='Date production started')),
                ('completion_date', models.DateField(blank=True, help_text='Date production completed', null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', help_text='Current status of the batch', max_length=20)),
                ('quality_check_passed', models.BooleanField(blank=True, help_text='Whether quality check was passed (null if not checked yet)', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this production batch')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('produced_by', models.ForeignKey(blank=True, help_text='User who managed this production batch', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='production_batches', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(help_text='Product being produced', on_delete=django.db.models.deletion.PROTECT, to='juice_app.product')),
            ],
            options={
                'verbose_name': 'Production Batch',
                'verbose_name_plural': 'Production Batches',
                'ordering': ['-production_date', 'batch_number'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('po_number', models.CharField(help_text='Purchase order number', max_length=20, unique=True)),
                ('order_date', models.DateField(help_text='Date order was placed')),
                ('expected_delivery_date', models.DateField(blank=True, help_text='Expected date of delivery', null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('partial', 'Partially Received'), ('received', 'Fully Received'), ('cancelled', 'Cancelled')], default='draft', help_text='Current status of the purchase order', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Total amount of the purchase order', max_digits=12, validators=[juice_app.validators.validate_non_negative])),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('partial', 'Partially Paid'), ('paid', 'Fully Paid'), ('cancelled', 'Cancelled')], default='pending', help_text='Current payment status', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this purchase order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this purchase order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchase_orders', to=settings.AUTH_USER_MODEL)),
                ('supplier', models.ForeignKey(help_text='Supplier for this purchase order', limit_choices_to={'is_supplier': True}, on_delete=django.db.models.deletion.PROTECT, to='juice_app.customer')),
            ],
            options={
                'verbose_name': 'Purchase Order',
                'verbose_name_plural': 'Purchase Orders',
                'ordering': ['-order_date', 'po_number'],
            },
        ),
        migrations.CreateModel(
            name='RawMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the raw material', max_length=100)),
                ('unit', models.CharField(choices=[('kg', 'Kilograms'), ('unit', 'Units'), ('liter', 'Liters'), ('gram', 'Grams')], help_text='Unit of measurement', max_length=20)),
                ('quantity_in_stock', models.DecimalField(decimal_places=2, help_text='Current quantity in stock', max_digits=10, validators=[juice_app.validators.validate_non_negative])),
                ('unit_cost', models.DecimalField(decimal_places=2, help_text='Cost per unit', max_digits=10, validators=[juice_app.validators.validate_positive])),
                ('last_purchase_date', models.DateField(blank=True, help_text='Date of last purchase', null=True)),
                ('reorder_level', models.DecimalField(decimal_places=2, help_text='Quantity at which to reorder', max_digits=10, validators=[juice_app.validators.validate_non_negative])),
                ('is_fruit', models.BooleanField(default=False, help_text='Whether this is a fruit raw material')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True, help_text='Additional details about this material')),
                ('supplier', models.ForeignKey(blank=True, help_text='Primary supplier of this material', limit_choices_to={'is_supplier': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='juice_app.customer')),
            ],
            options={
                'verbose_name': 'Raw Material',
                'verbose_name_plural': 'Raw Materials',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_ordered', models.DecimalField(decimal_places=2, help_text='Quantity ordered', max_digits=10, validators=[juice_app.validators.validate_positive])),
                ('quantity_received', models.DecimalField(decimal_places=2, default=0.0, help_text='Quantity received so far', max_digits=10, validators=[juice_app.validators.validate_non_negative])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10, validators=[juice_app.validators.validate_positive])),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price for this item (quantity * unit price)', max_digits=12, validators=[juice_app.validators.validate_non_negative])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('purchase_order', models.ForeignKey(help_text='Purchase order this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='juice_app.purchaseorder')),
                ('raw_material', models.ForeignKey(help_text='Raw material being ordered', on_delete=django.db.models.deletion.PROTECT, to='juice_app.rawmaterial')),
            ],
            options={
                'verbose_name': 'Purchase Order Item',
                'verbose_name_plural': 'Purchase Order Items',
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(help_text='Invoice number', max_length=20, unique=True)),
                ('sale_date', models.DateField(help_text='Date of sale')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('confirmed', 'Confirmed'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled')], default='draft', help_text='Current status of the sale', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Total amount of the sale', max_digits=12, validators=[juice_app.validators.validate_non_negative])),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('partial', 'Partially Paid'), ('paid', 'Fully Paid'), ('cancelled', 'Cancelled')], default='pending', help_text='Current payment status', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sale')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this sale', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sales', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(help_text='Customer for this sale', limit_choices_to={'is_buyer': True}, on_delete=django.db.models.deletion.PROTECT, to='juice_app.customer')),
            ],
            options={
                'verbose_name': 'Sale',
                'verbose_name_plural': 'Sales',
                'ordering': ['-sale_date', 'invoice_number'],
            },
        ),
        migrations.CreateModel(
            name='SaleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, help_text='Quantity sold', max_digits=10, validators=[juice_app.validators.validate_positive])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10, validators=[juice_app.validators.validate_positive])),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price for this item (quantity * unit price)', max_digits=12, validators=[juice_app.validators.validate_non_negative])),
                ('batch_numbers', models.TextField(blank=True, help_text='Batch numbers this product came from (comma separated)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(help_text='Product being sold', on_delete=django.db.models.deletion.PROTECT, to='juice_app.product')),
                ('sale', models.ForeignKey(help_text='Sale this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='juice_app.sale')),
            ],
            options={
                'verbose_name': 'Sale Item',
                'verbose_name_plural': 'Sale Items',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('staff', 'Staff'), ('admin', 'Admin'), ('superadmin', 'Super Admin')], default='staff', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20, validators=[juice_app.validators.validate_phone_number])),
                ('department', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='MaterialUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planned_quantity', models.DecimalField(decimal_places=4, help_text='Planned quantity to use', max_digits=10, validators=[juice_app.validators.validate_positive])),
                ('actual_quantity_used', models.DecimalField(blank=True, decimal_places=4, help_text='Actual quantity used (filled upon batch completion)', max_digits=10, null=True, validators=[juice_app.validators.validate_non_negative])),
                ('waste_quantity', models.DecimalField(decimal_places=4, default=0, help_text='Quantity wasted during production', max_digits=10, validators=[juice_app.validators.validate_non_negative])),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this material usage')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(help_text='Production batch this usage is for', on_delete=django.db.models.deletion.CASCADE, related_name='material_usages', to='juice_app.productionbatch')),
                ('raw_material', models.ForeignKey(help_text='Raw material used', on_delete=django.db.models.deletion.PROTECT, to='juice_app.rawmaterial')),
            ],
            options={
                'verbose_name': 'Material Usage',
                'verbose_name_plural': 'Material Usages',
                'unique_together': {('batch', 'raw_material')},
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_required', models.DecimalField(decimal_places=4, help_text='Quantity required per unit of product', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0001)])),
                ('notes', models.TextField(blank=True, help_text='Special instructions or notes about this ingredient')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is a primary ingredient in the product')),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Order in which ingredients are added in production')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(help_text='Product this recipe ingredient is for', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='juice_app.product')),
                ('raw_material', models.ForeignKey(help_text='Raw material used in this recipe', on_delete=django.db.models.deletion.CASCADE, to='juice_app.rawmaterial')),
            ],
            options={
                'verbose_name': 'Recipe Ingredient',
                'verbose_name_plural': 'Recipe Ingredients',
                'ordering': ['product', 'order', 'raw_material'],
                'indexes': [models.Index(fields=['product', 'raw_material'], name='juice_app_r_product_777569_idx')],
                'unique_together': {('product', 'raw_material')},
            },
        ),
    ]
